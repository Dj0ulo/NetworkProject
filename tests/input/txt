select_tut(2) - Linux man page
Name
select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO - synchronous I/O multiplexing

Synopsis
/* According to POSIX.1-2001 */
#include <sys/select.h>

/* According to earlier standards */
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

int select(int nfds, fd_set *readfds, fd_set *writefds,
           fd_set *exceptfds, struct timeval *utimeout);

void FD_CLR(int fd, fd_set *set);
int  FD_ISSET(int fd, fd_set *set);
void FD_SET(int fd, fd_set *set);
void FD_ZERO(fd_set *set);

#include <sys/select.h>

int pselect(int nfds, fd_set *readfds, fd_set *writefds,
            fd_set *exceptfds, const struct timespec *ntimeout,
            const sigset_t *sigmask);
Feature Test Macro Requirements for glibc (see feature_test_macros(7)):
pselect(): _POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE >= 600
Description
select() (or pselect()) is used to efficiently monitor multiple file descriptors, to see if any of them is, or becomes, "ready"; that is, to see whether I/O becomes possible, or an "exceptional condition" has occurred on any of the descriptors.

Its principal arguments are three "sets" of file descriptors: readfds, writefds, and exceptfds. Each set is declared as type fd_set, and its contents can be manipulated with the macros FD_CLR(), FD_ISSET(), FD_SET(), and FD_ZERO(). A newly declared set should first be cleared using FD_ZERO(). select() modifies the contents of the sets according to the rules described below; after calling select() you can test if a file descriptor is still present in a set with the FD_ISSET() macro. FD_ISSET() returns nonzero if a specified file descriptor is present in a set and zero if it is not. FD_CLR() removes a file descriptor from a set.

Arguments

readfds
This set is watched to see if data is available for reading from any of its file descriptors. After select() has returned, readfds will be cleared of all file descriptors except for those that are immediately available for reading.
writefds
This set is watched to see if there is space to write data to any of its file descriptors. After select() has returned, writefds will be cleared of all file descriptors except for those that are immediately available for writing.
exceptfds
This set is watched for "exceptional conditions". In practice, only one such exceptional condition is common: the availability of out-of-band (OOB) data for reading from a TCP socket. See recv(2), send(2), and tcp(7) for more details about OOB data. (One other less common case where select(2) indicates an exceptional condition occurs with pseudoterminals in packet mode; see tty_ioctl(4).) After select() has returned, exceptfds will be cleared of all file descriptors except for those for which an exceptional condition has occurred.
nfds
This is an integer one more than the maximum of any file descriptor in any of the sets. In other words, while adding file descriptors to each of the sets, you must calculate the maximum integer value of all of them, then increment this value by one, and then pass this as nfds.

utimeout
This is the longest time select() may wait before returning, even if nothing interesting happened. If this value is passed as NULL, then select() blocks indefinitely waiting for a file descriptor to become ready. utimeout can be set to zero seconds, which causes select() to return immediately, with information about the readiness of file descriptors at the time of the call. The structure struct timeval is defined as:
struct timeval {
    time_t tv_sec;    /* seconds */
    long tv_usec;     /* microseconds */
};
ntimeout
This argument for pselect() has the same meaning as utimeout, but struct timespec has nanosecond precision as follows:
struct timespec {
    long tv_sec;    /* seconds */
    long tv_nsec;   /* nanoseconds */
};
sigmask
This argument holds a set of signals that the kernel should unblock (i.e., remove from the signal mask of the calling thread), while the caller is blocked inside the pselect() call (see sigaddset(3) and sigprocmask(2)). It may be NULL, in which case the call does not modify the signal mask on entry and exit to the function. In this case, pselect() will then behave just like select().
Combining signal and data events

pselect() is useful if you are waiting for a signal as well as for file descriptor(s) to become ready for I/O. Programs that receive signals normally use the signal handler only to raise a global flag. The global flag will indicate that the event must be processed in the main loop of the program. A signal will cause the select() (or pselect()) call to return with errno set to EINTR. This behavior is essential so that signals can be processed in the main loop of the program, otherwise select() would block indefinitely. Now, somewhere in the main loop will be a conditional to check the global flag. So we must ask: what if a signal arrives after the conditional, but before the select() call? The answer is that select() would block indefinitely, even though an event is actually pending. This race condition is solved by the pselect() call. This call can be used to set the signal mask to a set of signals that are only to be received within the pselect() call. For instance, let us say that the event in question was the exit of a child process. Before the start of the main loop, we would block SIGCHLD using sigprocmask(2). Our pselect() call would enable SIGCHLD by using an empty signal mask. Our program would look like:
static volatile sig_atomic_t got_SIGCHLD = 0;





